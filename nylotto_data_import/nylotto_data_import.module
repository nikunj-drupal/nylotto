<?php

/**
 * @file
 * Module guzzle here.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_cron().
 *
 * Queues news feeds for import games & Retailers.
 */
function nylotto_data_import_cron() {
  // Cron API service.
  $cron_importers = \Drupal::service('nylotto.cron_importers');
  // API Import.
  $cron_importers->cronAPIImport();
  // Retailers Import.
  $cron_importers->cronRetailorImport();
  // FTP Import.
  $cron_importers->cronFTPImport();
}

/**
 * Returns the paragraph for drawing data.
 */
function getDrawingDataParagraph($nid, $date, $time = '') {

  // Check for a drawing data paragraph for this node.
  $query = \Drupal::entityQuery('paragraph')
    ->condition('type', 'drawing_data')
    ->condition('field_draw_date', $date)
    ->condition('parent_id', $nid)
    ->condition('parent_type', 'node');

  if ($time !== '') {
    $query->condition('field_draw_time', $time);
  }
  $pids = $query->execute();
  if (count($pids) > 0) {
    return entity_load('paragraph', array_shift($pids));
  }
  else {
    // Loop through the node and try to find it via field api.
    $node = entity_load('node', $nid);
    foreach ($node->field_drawing_data->referencedEntities() as $paragraph) {
      $targetDate = new \DateTime();
      $targetDate->setTimeStamp($paragraph->field_draw_date->value);
      if ($targetDate->format('Y-m-d') == $date) {
        if (($time !== '' && $time == $paragraph->field_draw_time->value) || $time == '') {
          return $paragraph;
        }
      }
    }
  }
  return FALSE;

}

/**
 * Implements hook_entity_type_build().
 */
function nylotto_data_import_entity_type_build(array &$entity_types) {
  $entity_types['node']->setFormClass('payout_verification', 'Drupal\node\NodeForm');
  $entity_types['node']->setFormClass('retailer_verification', 'Drupal\node\NodeForm');
}

/**
 * Implements hook_entity_form_display_alter().
 */
function nylotto_data_import_entity_form_display_alter(&$form_mode, $context) {
  if ($context['entity_type'] == 'node' && $context['bundle'] == 'game') {
    $entity = \Drupal::routeMatch()->getParameter('node');
    switch ($entity->field_game_type->value) {

      case 'Draw':
        if ($newDisplay = _getCustomGameFormDisplay($entity, 'draw')) {
          // $form_mode = $newDisplay;
        }

        break;

      case 'Scratch Off':
        $id = "node.game.scratch_off_game";
        $storage = \Drupal::entityManager()->getStorage('entity_form_display');
        $form_mode = $storage->load($id);

        break;

      default:
        break;
    }
  }
}

/**
 * Returns a custom form display if it exists.
 */
function _getCustomGameFormDisplay($entity, $game_type) {
  $id = "node.game.{$entity->field_game_id->value}_{$game_type}_game";

  $storage = \Drupal::entityManager()->getStorage('entity_form_display');
  $display = $storage->load($id);

  return $display;
}

/**
 * Form alter for node.
 */
function nylotto_data_import_form_alter(array &$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'node_game_edit_form') {
    // Handling for drawing games.
    $node = $form_state->getFormObject()->getEntity();

    if ($node->bundle() == 'game') {
      $options = [];
      foreach ($node->field_game_options->getValue() as $value) {
        $options[$value['value']] = $value['value'];
      }
      $settings = [
        'game_type' => ($node->field_game_type) ? $node->field_game_type->getValue()[0]['value'] : [],
        'game_options' => $options,
      ];
      $form['#attached']['drupalSettings']['nylotto_data'] = $settings;
      $form['#attached']['library'][] = 'nylotto_data_import/edit_behaviors.games';
    }
  }
  if ($form_id == 'views_exposed_form') {
    if ($form['#id'] == 'views-exposed-form-payout-verification-page-1') {
      $ids = \Drupal::entityQuery('node')
        ->condition('type', 'game')
        ->condition('field_feature_approved', 1)
        ->execute();
      $options = ['' => ''];
      foreach (entity_load_multiple('node', $ids) as $id => $node) {
        $options[$node->label()] = $node->label();
      }

      $form['title']['#type'] = 'select';
      $form['title']['#options'] = $options;
      $form['title']['#size'] = 1;
    }
    elseif ($form['#id'] == 'views-exposed-form-payout-verification-page-3') {
      $ids = \Drupal::entityQuery('node')
        ->condition('type', 'game')
        ->execute();
      $options = ['' => ''];
      foreach (entity_load_multiple('node', $ids) as $id => $node) {
        $options[$node->label()] = $node->label();
      }

      $form['title']['#type'] = 'select';
      $form['title']['#options'] = $options;
      $form['title']['#size'] = 1;
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function nylotto_data_import_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  if (get_class($context['widget']) === 'Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget' && !empty($context['form']['#attributes'])) {

    if ($element['#paragraph_type'] == 'drawing_data') {
      $paragraph = $context['items'][$context['delta']]->entity;

      $drawDateLabel = 'No Draw Date entered';
      if (($paragraph->field_draw_date)) {
        $drawDateLabel = $paragraph->field_draw_date->value;
      }

      if (($paragraph->field_draw_time)) {
        $drawDateLabel .= " {$paragraph->field_draw_time->value} ";
      }

      $element['top']['summary']['fields_info']['#summary']['content'] = $drawDateLabel;
    }

    if ($element['#paragraph_type'] == 'winners_data') {
      $paragraph = $context['items'][$context['delta']]->entity;
      $element['subform']['#attributes']['class'][] = 'winners-data-wrapper';
      $element['top']['summary']['fields_info']['#summary']['content'] = [
        t('Level') . ": " . (($paragraph->field_prize_label) ? $paragraph->field_prize_label->value : 'No Prize level'),
        t('Winners') . ": " . (($paragraph->field_prize_winners) ? $paragraph->field_prize_winners->value : '0'),
        t('Amount') . ": " . (($paragraph->field_prize_amount) ? $paragraph->field_prize_amount->value : '0'),
      ];
    }

    if ($element['#paragraph_type'] == 'winning_location') {
      $paragraph = $context['items'][$context['delta']]->entity;
      $element['subform']['#attributes']['class'][] = 'winner-location-data-wrapper';
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function nylotto_data_import_entity_base_field_info(ContentEntityType $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node' || $entity_type->id() == 'paragraph') {
    $fields['normalized'] = BaseFieldDefinition::create('map')->setLabel(t('Normalized'));
  }

  return $fields;
}

/**
 * Delete all imported draw.
 */
function clean_imports_task($ids, &$context) {

  foreach ($ids as $pids_key => $pids_value) {
    $entity = \Drupal::entityTypeManager()->getStorage('paragraph')->load($pids_value);
    $entity->delete();
    $delete_entity[] = $entity->id();
  }
  $context['results'][] = count($delete_entity);
}

/**
 * Delete all imported draw.
 */
function clean_imports_drawing_task($ids, &$context) {
  $storage_handler = \Drupal::entityTypeManager()->getStorage("drawing");
  $entities = $storage_handler->loadMultiple($ids);
  $storage_handler->delete($entities);
  $context['results'][] = count($ids);
}

/**
 * Delete all imported paragraph.
 */
function clean_imports_paragraph_task($ids, &$context) {
  $storage_handler = \Drupal::entityTypeManager()->getStorage("paragraph");
  $entities = $storage_handler->loadMultiple($ids);
  $storage_handler->delete($entities);
  $context['results'][] = count($ids);
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function clean_imports_finished($success, $results, $operations) {
  $messenger = \Drupal::messenger();
  if ($success) {

    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    $messenger
      ->addMessage(t('@count results processed.', [
        '@count' => count($results),
      ]));
    $messenger
      ->addMessage(t('The final result was "%final"', [
        '%final' => end($results),
      ]));
  }
  else {

    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $messenger
      ->addMessage(t('An error occurred while processing @operation with arguments : @args', [
        '@operation' => $error_operation[0],
        '@args' => print_r($error_operation[0], TRUE),
      ]));
  }
}

/**
 * Implements hook_entity_presave().
 */
function nylotto_data_import_entity_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'drawing_data') {
    $winning_number = $entity->get('field_winning_numbers_txt')->getString();
    if (!empty($winning_number)) {
      $winningNumbers = explode('|', $winning_number);
      foreach ($winningNumbers as $winningNumberskey => $winningNumbersvalue) {
        if (!empty($winningNumbersvalue)) {
          $entity->field_winning_numbers_split->appendItem($winningNumbersvalue);
        }
      }
    }
  }
}
